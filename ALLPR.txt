ls /usr/lib/jvm

export JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64 
export PATH=$JAVA_HOME/bin:$PATH
which java
export HADOOP_HOME=/home/cnlab/Desktop/DC/hadoop-2.10.2
export PATH=$HADOOP_HOME/bin:$PATH

hadoop com.sun.tools.javac.Main MaxTemperature.java MaxTemperatureMapper.java MaxTemperatureReducer.java

jar cf wc.jar MaxTemperature.class MaxTemperatureMapper.class MaxTemperatureReducer.class

hadoop jar wc.jar MaxTemperature 1901 output

cat output/*



Codes: PR 7 and 5(MinTemperature)

MinTemperature.java

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class MinTemperature {

  public static void main(String[] args) throws Exception {
	if (args.length != 2) {
  	System.err.println("Usage: MinTemperature <input path> <output path>");
  	System.exit(-1);
	}
    
	Job job = new Job();
	job.setJarByClass(MinTemperature.class);
	job.setJobName("Min temperature");

	FileInputFormat.addInputPath(job, new Path(args[0]));
	FileOutputFormat.setOutputPath(job, new Path(args[1]));
    
	job.setMapperClass(MinTemperatureMapper.class);
	job.setReducerClass(MinTemperatureReducer.class);

	job.setOutputKeyClass(Text.class);
	job.setOutputValueClass(IntWritable.class);
    
	System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}



MInTemperatureMapper.java

import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class MinTemperatureMapper extends Mapper<LongWritable, Text, Text, IntWritable> {

  private static final int MISSING = 9999;
 
  @Override
  public void map(LongWritable key, Text value, Context context)
  	throws IOException, InterruptedException {
    
	String line = value.toString();
	// Assuming the sensor ID is in a specific position, let's say 0 to 10
	String sensorId = line.substring(0, 10).trim();  // Adjust this according to your actual data format
	int airTemperature;
    
	if (line.charAt(87) == '+') {
  	airTemperature = Integer.parseInt(line.substring(88, 92));
	} else {
  	airTemperature = Integer.parseInt(line.substring(87, 92));
	}
    
	String quality = line.substring(92, 93);
	if (airTemperature != MISSING && quality.matches("[01459]")) {
  	context.write(new Text(sensorId), new IntWritable(airTemperature));
	}
  }
}

MInTemperatureReducer.java

import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class MinTemperatureReducer extends Reducer<Text, IntWritable, Text, IntWritable> {

  @Override
  public void reduce(Text key, Iterable<IntWritable> values, Context context)
  	throws IOException, InterruptedException {
    
	int minValue = Integer.MAX_VALUE;
	for (IntWritable value : values) {
  	minValue = Math.min(minValue, value.get());
	}
	context.write(key, new IntWritable(minValue));  // Key is sensor ID, value is min temperature
  }
}




PR 6 Calculator MultiThreadedServer 

CalculatorClient.java

import java.io.*;
import java.net.*;

public class CalculatorClient e{
    private static final String SERVER_ADDRESS = "localhost";
    private static final int SERVER_PORT = 12345;
    private static final String SERVER_ADDRESS = "localhost"; 

    public static void main(String[] args) {
        try (Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             BufferedReader consoleInput = new BufferedReader(new InputStreamReader(System.in))) {

            System.out.println("Connected to server. Enter two numbers:");

            String userInput = consoleInput.readLine();
            out.println(userInput);

            String serverResponse = in.readLine();
            System.out.println(serverResponse); 

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


MultiThreadedServer.java

import java.io.*;
import java.net.*;

public class MultiThreadedServer {
    private static final int PORT = 12345;

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("Server started on port: " + PORT);
            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("New client connected: " + clientSocket.getInetAddress().getHostAddress());
                new ClientHandler(clientSocket).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class ClientHandler extends Thread {
    private final Socket socket;
    public ClientHandler(Socket socket) {
        this.socket = socket;
    }

    @Override
    public void run() {
        try (BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true)) {
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                String response = processCommand(inputLine);
                out.println(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private String processCommand(String command) {
        String[] parts = command.split(" ");
        if (parts.length != 2) {
            return "Invalid command. Use format: [number1] [number2]";
        }

        try {
            double num1 = Double.parseDouble(parts[0]);
            double num2 = Double.parseDouble(parts[1]);
  
            double sum = num1 + num2;
            double difference = num1 - num2;
            double product = num1 * num2;
            String divisionResult = num2 != 0 ? String.valueOf(num1 / num2) : "Error: Division by zero";
            
            return String.format("Results: Addition: %.2f, Subtraction: %.2f, Multiplication: %.2f, Division: %s",
                                 sum, difference, product, divisionResult);
        } catch (NumberFormatException e) {
            return "Invalid number format.";
        }
    }
}

Output :

javac MultiThreadedServer.java CalculatorClient.java

java MultiThreadedServer


In another Terminal :

java CalculatorClient





PR.8  Aglets
First Extract this zip in Home Dir
go to: /java/aglet/bin>


chmod 755 ant

./ant

ant install-home

export AGLETS_HOME=/java/aglet

export AGLETS_PATH=$AGLETS_HOME

export PATH=$PATH:$AGLETS_HOME/bin


agletsd -f ../cnf/aglets.props    or  agletsd     orr ./agletsd

username :anonymous  or aglet_key
pass : aglets


MyAglet.java

package myfirst;
import com.ibm.aglet.*;
public class MyAglet extends Aglet {
public void run() {
System.out.println("Hello, world!");
setText("you can see this in the Tahiti window");
}
}






PR 9 . RMI

Calculator.java

import java.rmi.*;

public interface Calculator extends Remote {
    int add(int x, int y) throws RemoteException;
    int subtract(int x, int y) throws RemoteException;
    int multiply(int x, int y) throws RemoteException;
    int divide(int x, int y) throws RemoteException;
}



CalculatorImpl.java

import java.rmi.*;
import java.rmi.server.*;

public class CalculatorImpl extends UnicastRemoteObject implements Calculator {
    public CalculatorImpl() throws RemoteException {
        super();
    }

    public int add(int x, int y) {
        return x + y;
    }

    public int subtract(int x, int y) {
        return x - y;
    }

    public int multiply(int x, int y) {
        return x * y;
    }

    public int divide(int x, int y) {
        if (y != 0) {
            return x / y;
        } else {
            return -1; // return -1 if division by zero
        }
    }
}




Server.java

import java.rmi.*;
import java.rmi.registry.*;

public class Server {
    public static void main(String[] args) {
        try {
            Calculator stub = new CalculatorImpl();
            Naming.rebind("rmi://localhost:5000/calculate", stub);
            System.out.println("Server is ready.");
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
}



Client.java

import java.rmi.*;

public class Client {
    public static void main(String[] args) {
        int x = 15, y = 5;
        try {
            Calculator stub = (Calculator) Naming.lookup("rmi://localhost:5000/calculate");

            System.out.println("x = " + x + " | y = " + y);
            System.out.println("x + y: " + stub.add(x, y));
            System.out.println("x - y: " + stub.subtract(x, y));
            System.out.println("x * y: " + stub.multiply(x, y));
            System.out.println("x / y: " + stub.divide(x, y));
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
}


Output:

javac Calculator.java CalculatorImpl.java 

rmic CalculatorImpl

javac Server.java Client.java

rmiregistry 5000

java Server

java Client
x = 15 | y = 5
x + y: 20
x - y: 10
x * y: 75
x / y: 3




MPI PR 10.

mpi_avg.c


#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char *argv[])
{
    int rank, size;
    int *array = NULL;
    int local_sum = 0, global_sum = 0;
    double average = 0.0;
    int local_N, N, remainder;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Input array size and values (by rank 0)
    if (rank == 0)
    {
        printf("Enter the size of the array: ");
        scanf("%d", &N);

        array = (int *)malloc(N * sizeof(int));
        printf("Enter %d values for the array:\n", N);
        for (int i = 0; i < N; i++)
        {
            printf("array[%d]: ", i);
            scanf("%d", &array[i]);
        }
    }

    // Broadcast array size to all processes
    MPI_Bcast(&N, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Determine local size and remainder
    local_N = N / size;
    remainder = N % size;
    if (rank < remainder)
    {
        local_N += 1;
    }

    // Allocate memory for local array
    int *local_array = (int *)malloc(local_N * sizeof(int));

    // Prepare sendcounts and displacements
    int *sendcounts = NULL, *displs = NULL;
    if (rank == 0)
    {
        sendcounts = (int *)malloc(size * sizeof(int));
        displs = (int *)malloc(size * sizeof(int));

        int offset = 0;
        for (int i = 0; i < size; i++)
        {
            sendcounts[i] = N / size + (i < remainder ? 1 : 0);
            displs[i] = offset;
            offset += sendcounts[i];
        }
    }

    // Scatter the data among processes
    MPI_Scatterv(array, sendcounts, displs, MPI_INT, local_array, local_N, MPI_INT, 0, MPI_COMM_WORLD);

    // Calculate local sum
    for (int i = 0; i < local_N; i++)
    {
        local_sum += local_array[i];
    }

    printf("Rank %d: Local sum = %d\n", rank, local_sum);

    // Reduce local sums into the global sum
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Calculate average at root
    if (rank == 0)
    {
        average = (double)global_sum / N;
        printf("Total sum: %d\n", global_sum);
        printf("Average: %f\n", average);

        free(array);
        free(sendcounts);
        free(displs);
    }

    free(local_array);

    MPI_Finalize();
    return 0;
}



mpicc -o mpi_avg mpi_avg.c


mpirun -np 4 ./mpi_avg


Enter the size of the array: 8
Enter 8 values for the array:
array[0]: 10
array[1]: 20
array[2]: 30
array[3]: 40
array[4]: 50
array[5]: 60
array[6]: 70
array[7]: 80
Rank 0: Local sum = 30
Rank 1: Local sum = 70
Rank 2: Local sum = 110
Rank 3: Local sum = 150
Total sum: 360
Average: 45.000000










